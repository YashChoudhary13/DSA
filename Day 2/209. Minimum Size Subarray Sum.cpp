// Link to the problem:
// https://leetcode.com/problems/minimum-size-subarray-sum/description/

// Solution:
#include "bits/stdc++.h"
using namespace std;

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int n = nums.size();
        int left = 0, sum = 0;
        int ans = INT_MAX;

        for (int right = 0; right < n; right++) {
            sum += nums[right]; // Expand the window by including nums[right]

            // Shrink window while it's valid
            while (sum >= target) {
                ans = min(ans, right - left + 1);
                sum -= nums[left];
                left++;
            }
        }

        return (ans == INT_MAX) ? 0 : ans;
    }
};

// Learnings & Key Points:
/*
ðŸ‘‰ Concept: Sliding Window (Dynamic Window)
   - Expand window â†’ by moving right pointer and adding to sum
   - Shrink window â†’ while sum >= target, move left pointer and subtract from sum
   - Maintain the smallest window length that meets condition

ðŸ‘‰ Why Sliding Window Works:
   - The array contains only positive integers.
   - Once sum >= target, moving left only reduces sum â€” this allows us to safely shrink.

ðŸ‘‰ What I Initially Did:
   - Used if-else ladder instead of a while loop
   - Didnâ€™t check all smaller valid windows before expanding again
   - Missed +1 in window size (since both left and right are inclusive)
   - Didnâ€™t handle case when no subarray is found (ans == INT_MAX)

ðŸ‘‰ Key Fixes / Things to Remember:
   - Always use `while (sum >= target)` â†’ to keep shrinking until window becomes invalid
   - Window size = (right - left + 1)
   - Return 0 if no valid subarray found
   - Expand â†’ check â†’ shrink (thatâ€™s the rhythm of dynamic sliding window)
   - Works only for positive numbers â€” if negatives are involved, prefix sum or other methods are needed.

ðŸ‘‰ Time & Space:
   - Time Complexity: O(n)
   - Space Complexity: O(1)
*/

// Example walkthrough:
/*
target = 7, nums = [2,3,1,2,4,3]

right = 0 â†’ sum = 2 (<7)
right = 1 â†’ sum = 5 (<7)
right = 2 â†’ sum = 6 (<7)
right = 3 â†’ sum = 8 (>=7)
   â†’ window [0..3] = len 4 â†’ ans = 4
   â†’ shrink: sum -= 2 â†’ sum = 6
right = 4 â†’ sum = 10 (>=7)
   â†’ window [1..4] = len 4 â†’ ans = 4
   â†’ shrink: sum -= 3 â†’ sum = 7 (>=7)
   â†’ window [2..4] = len 3 â†’ ans = 3
   â†’ shrink: sum -= 1 â†’ sum = 6 (<7)
right = 5 â†’ sum = 9 (>=7)
   â†’ window [3..5] = len 3 â†’ ans = 3
   â†’ shrink: sum -= 2 â†’ sum = 7 (>=7)
   â†’ window [4..5] = len 2 â†’ ans = 2
âœ… Final answer = 2
*/

// Key Takeaways:
/*
âœ… Understand when to expand vs. when to shrink.
âœ… Sliding window = "keep valid window, shrink as much as possible".
âœ… Donâ€™t mix if-else, use while loop to continuously shrink.
âœ… Handle no-result case with INT_MAX â†’ 0 conversion.
âœ… Foundational pattern for advanced problems:
   - Longest Substring Without Repeating Characters (#3)
   - Minimum Window Substring (#76)
   - Subarray Product Less Than K (#713)
*/
